; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -o - -S '--passes=simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-lookup;keep-loops;hoist-common-insts;sink-common-insts>' | FileCheck %s
; ModuleID = 'move-dbg-drop-preds.ll'
source_filename = "move-dbg-drop-preds.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata)

; Function Attrs: nofree norecurse noreturn nosync nounwind
define i32 @ConvertUTF8toUTF32(ptr %targetStart, ptr nocapture readonly %targetStart.addr, ptr nocapture readnone %0, ptr nocapture readnone %target, ptr nocapture readnone %offsetsFromUTF8, ptr nocapture readnone %arrayidx35, i32 %1, i32 %sub, ptr nocapture readnone %ch, i32 %2, i1 %cmp42, i32 %3, i1 %cmp45, ptr nocapture readnone %4, ptr nocapture writeonly %5) local_unnamed_addr {
; CHECK-LABEL: @ConvertUTF8toUTF32(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    store ptr [[TARGETSTART:%.*]], ptr [[TARGETSTART]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TARGETSTART_ADDR:%.*]], align 8, !dbg [[DBG55:![0-9]+]]
; CHECK-NEXT:    store ptr [[TMP6]], ptr [[TARGETSTART]], align 8
; CHECK-NEXT:    br label [[WHILE_COND:%.*]]
; CHECK:       while.cond:
; CHECK-NEXT:    [[TARGET2_0:%.*]] = phi ptr [ undef, [[ENTRY:%.*]] ], [ [[TARGET2_1:%.*]], [[WHILE_COND]] ]
; CHECK-NEXT:    call void @llvm.dbg.value(metadata ptr [[TARGET2_0]], metadata [[META73:![0-9]+]], metadata !DIExpression()), !dbg [[DBG77:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP1:%.*]], ptr [[TARGETSTART]], align 4
; CHECK-NEXT:    [[TARGET2_0_TARGETSTART:%.*]] = select i1 [[CMP42:%.*]], ptr [[TARGET2_0]], ptr [[TARGETSTART]]
; CHECK-NEXT:    [[TARGET2_0_:%.*]] = select i1 [[CMP42]], ptr [[TARGET2_0]], ptr [[TMP5:%.*]]
; CHECK-NEXT:    store i32 0, ptr [[TARGET2_0_TARGETSTART]], align 4
; CHECK-NEXT:    [[TARGET2_1]] = getelementptr inbounds i32, ptr [[TARGET2_0_]], i64 1
; CHECK-NEXT:    call void @llvm.dbg.value(metadata ptr [[TARGET2_1]], metadata [[META73]], metadata !DIExpression()), !dbg [[DBG77]]
; CHECK-NEXT:    br label [[WHILE_COND]]
;
entry:
  store ptr %targetStart, ptr %targetStart, align 8
  %6 = load ptr, ptr %targetStart.addr, align 8, !dbg !55
  store ptr %6, ptr %targetStart, align 8
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %entry
  %target2.0 = phi ptr [ undef, %entry ], [ %target2.1, %cleanup.cont ]
  call void @llvm.dbg.value(metadata ptr %target2.0, metadata !73, metadata !DIExpression()), !dbg !77
  store i32 %1, ptr %targetStart, align 4
  br i1 %cmp42, label %if.then44, label %if.else63

if.then44:                                        ; preds = %while.cond
  call void @llvm.dbg.value(metadata ptr %target2.0, metadata !73, metadata !DIExpression(DW_OP_plus_uconst, 4, DW_OP_stack_value)), !dbg !77
  store i32 0, ptr %target2.0, align 4
  br label %cleanup.cont

if.else63:                                        ; preds = %while.cond
  call void @llvm.dbg.value(metadata ptr %5, metadata !73, metadata !DIExpression(DW_OP_plus_uconst, 4, DW_OP_stack_value)), !dbg !77
  store i32 0, ptr %targetStart, align 4
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %if.then44, %if.else63
  %target2.0.pn = phi ptr [ %target2.0, %if.then44 ], [ %5, %if.else63 ]
  %target2.1 = getelementptr inbounds i32, ptr %target2.0.pn, i64 1
  call void @llvm.dbg.value(metadata ptr %target2.1, metadata !73, metadata !DIExpression()), !dbg !77
  br label %while.cond
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata)

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!50, !51, !52, !53, !54}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !15, globals: !21, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/fast/fs/llvm34/lib/Support/ConvertUTF.c", directory: "/fast/fs/build34llvm5", checksumkind: CSK_MD5, checksum: "3705cd9156f3681b107562d95ae62f80")
!2 = !{!3, !11}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 118, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "llvm34/include/llvm/Support/ConvertUTF.h", directory: "/fast/fs", checksumkind: CSK_MD5, checksum: "938fc519f3fcdfcb26b5b601d133eb18")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8, !9, !10}
!7 = !DIEnumerator(name: "conversionOK", value: 0)
!8 = !DIEnumerator(name: "sourceExhausted", value: 1)
!9 = !DIEnumerator(name: "targetExhausted", value: 2)
!10 = !DIEnumerator(name: "sourceIllegal", value: 3)
!11 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 125, baseType: !5, size: 32, elements: !12)
!12 = !{!13, !14}
!13 = !DIEnumerator(name: "strictConversion", value: 0)
!14 = !DIEnumerator(name: "lenientConversion", value: 1)
!15 = !{!16, !17, !19}
!16 = !DIDerivedType(tag: DW_TAG_typedef, name: "UTF32", file: !4, line: 101, baseType: !5)
!17 = !DIDerivedType(tag: DW_TAG_typedef, name: "UTF16", file: !4, line: 102, baseType: !18)
!18 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!19 = !DIDerivedType(tag: DW_TAG_typedef, name: "UTF8", file: !4, line: 103, baseType: !20)
!20 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!21 = !{!22, !26, !30, !32, !38, !45}
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression(DW_OP_constu, 65536, DW_OP_stack_value))
!23 = distinct !DIGlobalVariable(name: "halfBase", scope: !0, file: !24, line: 57, type: !25, isLocal: true, isDefinition: true)
!24 = !DIFile(filename: "llvm34/lib/Support/ConvertUTF.c", directory: "/fast/fs", checksumkind: CSK_MD5, checksum: "3705cd9156f3681b107562d95ae62f80")
!25 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression(DW_OP_constu, 10, DW_OP_stack_value))
!27 = distinct !DIGlobalVariable(name: "halfShift", scope: !0, file: !24, line: 55, type: !28, isLocal: true, isDefinition: true)
!28 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !29)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression(DW_OP_constu, 1023, DW_OP_stack_value))
!31 = distinct !DIGlobalVariable(name: "halfMask", scope: !0, file: !24, line: 58, type: !25, isLocal: true, isDefinition: true)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "firstByteMark", scope: !0, file: !24, line: 102, type: !34, isLocal: true, isDefinition: true)
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !35, size: 56, elements: !36)
!35 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!36 = !{!37}
!37 = !DISubrange(count: 7)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(name: "trailingBytesForUTF8", scope: !0, file: !24, line: 76, type: !40, isLocal: true, isDefinition: true)
!40 = !DICompositeType(tag: DW_TAG_array_type, baseType: !41, size: 2048, elements: !43)
!41 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !42)
!42 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!43 = !{!44}
!44 = !DISubrange(count: 256)
!45 = !DIGlobalVariableExpression(var: !46, expr: !DIExpression())
!46 = distinct !DIGlobalVariable(name: "offsetsFromUTF8", scope: !0, file: !24, line: 92, type: !47, isLocal: true, isDefinition: true)
!47 = !DICompositeType(tag: DW_TAG_array_type, baseType: !25, size: 192, elements: !48)
!48 = !{!49}
!49 = !DISubrange(count: 6)
!50 = !{i32 7, !"Dwarf Version", i32 5}
!51 = !{i32 2, !"Debug Info Version", i32 3}
!52 = !{i32 1, !"wchar_size", i32 4}
!53 = !{i32 7, !"PIC Level", i32 2}
!54 = !{i32 7, !"uwtable", i32 2}
!55 = !DILocation(line: 499, column: 21, scope: !56)
!56 = distinct !DISubprogram(name: "ConvertUTF8toUTF32", scope: !24, file: !24, line: 494, type: !57, scopeLine: 496, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !65)
!57 = !DISubroutineType(types: !58)
!58 = !{!59, !60, !61, !62, !63, !64}
!59 = !DIDerivedType(tag: DW_TAG_typedef, name: "ConversionResult", file: !4, line: 123, baseType: !3)
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !63, size: 64)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!64 = !DIDerivedType(tag: DW_TAG_typedef, name: "ConversionFlags", file: !4, line: 128, baseType: !11)
!65 = !{!66, !67, !68, !69, !70, !71, !72, !73, !74, !76}
!66 = !DILocalVariable(name: "sourceStart", arg: 1, scope: !56, file: !24, line: 495, type: !60)
!67 = !DILocalVariable(name: "sourceEnd", arg: 2, scope: !56, file: !24, line: 495, type: !61)
!68 = !DILocalVariable(name: "targetStart", arg: 3, scope: !56, file: !24, line: 496, type: !62)
!69 = !DILocalVariable(name: "targetEnd", arg: 4, scope: !56, file: !24, line: 496, type: !63)
!70 = !DILocalVariable(name: "flags", arg: 5, scope: !56, file: !24, line: 496, type: !64)
!71 = !DILocalVariable(name: "result", scope: !56, file: !24, line: 497, type: !59)
!72 = !DILocalVariable(name: "source", scope: !56, file: !24, line: 498, type: !61)
!73 = !DILocalVariable(name: "target", scope: !56, file: !24, line: 499, type: !63)
!74 = !DILocalVariable(name: "ch", scope: !75, file: !24, line: 501, type: !16)
!75 = distinct !DILexicalBlock(scope: !56, file: !24, line: 500, column: 32)
!76 = !DILocalVariable(name: "extraBytesToRead", scope: !75, file: !24, line: 502, type: !18)
!77 = !DILocation(line: 0, scope: !56)
