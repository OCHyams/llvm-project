; RUN: opt -sroa %s -S -o - | FileCheck %s

;; $ cat test.cpp
;; class a {
;; public:
;;   float b[4];
;;   void c();
;; };
;; class B {
;; public:
;;   a d;
;;   B() : e(d) {}
;;   a &f() { return e; }
;;   a e;
;; };
;; void g() {
;;   B h;
;;   a i = h.f();
;;   i.c();
;; }
;;
;; Generated by grabbing IR before sroa in:
;; $ clang++ -O2 -g -c test.cpp -Xclang -debug-coffee-chat

;; Check that we don't try to create fragments in SROA when there is no
;; existing fragment and the slice size is already the same as the variable
;; size.

; CHECK: define dso_local void @_Z1gv
; CHECK: call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %2, i64 16, i1 false), !dbg{{.+}}!DIAssignID ![[id:[0-9]+]]
; CHECK-NEXT: call void @llvm.dbg.assign(metadata i1 undef, metadata ![[var:[0-9]+]], metadata !DIExpression(), metadata ![[id]], metadata i8* %1), !dbg
; CHECK: [[var]] = !DILocalVariable(name: "i",

%class.B = type { %class.a, %class.a }
%class.a = type { [4 x float] }

$_ZN1BC2Ev = comdat any

$_ZN1B1fEv = comdat any

; Function Attrs: uwtable
define dso_local void @_Z1gv() #0 !dbg !7 {
entry:
  %h = alloca %class.B, align 4, !DIAssignID !36
  call void @llvm.dbg.assign(metadata i1 undef, metadata !11, metadata !DIExpression(), metadata !36, metadata %class.B* %h), !dbg !37
  %i = alloca %class.a, align 4, !DIAssignID !38
  call void @llvm.dbg.assign(metadata i1 undef, metadata !35, metadata !DIExpression(), metadata !38, metadata %class.a* %i), !dbg !37
  %0 = bitcast %class.B* %h to i8*, !dbg !39
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %0) #5, !dbg !39
  call void @_ZN1BC2Ev(%class.B* %h), !dbg !40
  %1 = bitcast %class.a* %i to i8*, !dbg !41
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1) #5, !dbg !41
  %call = call nonnull align 4 dereferenceable(16) %class.a* @_ZN1B1fEv(%class.B* %h), !dbg !42
  %2 = bitcast %class.a* %call to i8*, !dbg !43
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %2, i64 16, i1 false), !dbg !43, !tbaa.struct !44, !DIAssignID !48
  call void @llvm.dbg.assign(metadata i1 undef, metadata !35, metadata !DIExpression(), metadata !48, metadata i8* %1), !dbg !37
  call void @_ZN1a1cEv(%class.a* %i), !dbg !49
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1) #5, !dbg !50
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %0) #5, !dbg !50
  ret void, !dbg !50
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN1BC2Ev(%class.B* %this) unnamed_addr #3 comdat align 2 !dbg !51 {
entry:
  %this.addr = alloca %class.B*, align 8, !DIAssignID !55
  call void @llvm.dbg.assign(metadata i1 undef, metadata !53, metadata !DIExpression(), metadata !55, metadata %class.B** %this.addr), !dbg !56
  store %class.B* %this, %class.B** %this.addr, align 8, !tbaa !57, !DIAssignID !59
  call void @llvm.dbg.assign(metadata %class.B* %this, metadata !53, metadata !DIExpression(), metadata !59, metadata %class.B** %this.addr), !dbg !56
  %this1 = load %class.B*, %class.B** %this.addr, align 8
  %d = getelementptr inbounds %class.B, %class.B* %this1, i32 0, i32 0, !dbg !60
  %e = getelementptr inbounds %class.B, %class.B* %this1, i32 0, i32 1, !dbg !61
  %d2 = getelementptr inbounds %class.B, %class.B* %this1, i32 0, i32 0, !dbg !62
  %0 = bitcast %class.a* %e to i8*, !dbg !61
  %1 = bitcast %class.a* %d2 to i8*, !dbg !61
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 16, i1 false), !dbg !61, !tbaa.struct !44
  ret void, !dbg !63
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local nonnull align 4 dereferenceable(16) %class.a* @_ZN1B1fEv(%class.B* %this) #3 comdat align 2 !dbg !64 {
entry:
  %this.addr = alloca %class.B*, align 8, !DIAssignID !67
  call void @llvm.dbg.assign(metadata i1 undef, metadata !66, metadata !DIExpression(), metadata !67, metadata %class.B** %this.addr), !dbg !68
  store %class.B* %this, %class.B** %this.addr, align 8, !tbaa !57, !DIAssignID !69
  call void @llvm.dbg.assign(metadata %class.B* %this, metadata !66, metadata !DIExpression(), metadata !69, metadata %class.B** %this.addr), !dbg !68
  %this1 = load %class.B*, %class.B** %this.addr, align 8
  %e = getelementptr inbounds %class.B, %class.B* %this1, i32 0, i32 1, !dbg !70
  ret %class.a* %e, !dbg !71
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local void @_ZN1a1cEv(%class.a*) #4

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.assign(metadata, metadata, metadata, metadata, metadata) #2

attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 12.0.0", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "reduce.cpp", directory: "/")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 12.0.0"}
!7 = distinct !DISubprogram(name: "g", linkageName: "_Z1gv", scope: !1, file: !1, line: 13, type: !8, scopeLine: 13, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !10)
!8 = !DISubroutineType(types: !9)
!9 = !{null}
!10 = !{!11, !35}
!11 = !DILocalVariable(name: "h", scope: !7, file: !1, line: 14, type: !12)
!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "B", file: !1, line: 6, size: 256, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !13, identifier: "_ZTS1B")
!13 = !{!14, !26, !27, !31}
!14 = !DIDerivedType(tag: DW_TAG_member, name: "d", scope: !12, file: !1, line: 8, baseType: !15, size: 128, flags: DIFlagPublic)
!15 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "a", file: !1, line: 1, size: 128, flags: DIFlagTypePassByValue, elements: !16, identifier: "_ZTS1a")
!16 = !{!17, !22}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !15, file: !1, line: 3, baseType: !18, size: 128, flags: DIFlagPublic)
!18 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 128, elements: !20)
!19 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!20 = !{!21}
!21 = !DISubrange(count: 4)
!22 = !DISubprogram(name: "c", linkageName: "_ZN1a1cEv", scope: !15, file: !1, line: 4, type: !23, scopeLine: 4, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagOptimized)
!23 = !DISubroutineType(types: !24)
!24 = !{null, !25}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !12, file: !1, line: 11, baseType: !15, size: 128, offset: 128, flags: DIFlagPublic)
!27 = !DISubprogram(name: "B", scope: !12, file: !1, line: 9, type: !28, scopeLine: 9, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagOptimized)
!28 = !DISubroutineType(types: !29)
!29 = !{null, !30}
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!31 = !DISubprogram(name: "f", linkageName: "_ZN1B1fEv", scope: !12, file: !1, line: 10, type: !32, scopeLine: 10, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagOptimized)
!32 = !DISubroutineType(types: !33)
!33 = !{!34, !30}
!34 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !15, size: 64)
!35 = !DILocalVariable(name: "i", scope: !7, file: !1, line: 15, type: !15)
!36 = distinct !DIAssignID()
!37 = !DILocation(line: 0, scope: !7)
!38 = distinct !DIAssignID()
!39 = !DILocation(line: 14, column: 3, scope: !7)
!40 = !DILocation(line: 14, column: 5, scope: !7)
!41 = !DILocation(line: 15, column: 3, scope: !7)
!42 = !DILocation(line: 15, column: 11, scope: !7)
!43 = !DILocation(line: 15, column: 9, scope: !7)
!44 = !{i64 0, i64 16, !45}
!45 = !{!46, !46, i64 0}
!46 = !{!"omnipotent char", !47, i64 0}
!47 = !{!"Simple C++ TBAA"}
!48 = distinct !DIAssignID()
!49 = !DILocation(line: 16, column: 5, scope: !7)
!50 = !DILocation(line: 17, column: 1, scope: !7)
!51 = distinct !DISubprogram(name: "B", linkageName: "_ZN1BC2Ev", scope: !12, file: !1, line: 9, type: !28, scopeLine: 9, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, declaration: !27, retainedNodes: !52)
!52 = !{!53}
!53 = !DILocalVariable(name: "this", arg: 1, scope: !51, type: !54, flags: DIFlagArtificial | DIFlagObjectPointer)
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!55 = distinct !DIAssignID()
!56 = !DILocation(line: 0, scope: !51)
!57 = !{!58, !58, i64 0}
!58 = !{!"any pointer", !46, i64 0}
!59 = distinct !DIAssignID()
!60 = !DILocation(line: 9, column: 3, scope: !51)
!61 = !DILocation(line: 9, column: 9, scope: !51)
!62 = !DILocation(line: 9, column: 11, scope: !51)
!63 = !DILocation(line: 9, column: 15, scope: !51)
!64 = distinct !DISubprogram(name: "f", linkageName: "_ZN1B1fEv", scope: !12, file: !1, line: 10, type: !32, scopeLine: 10, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, declaration: !31, retainedNodes: !65)
!65 = !{!66}
!66 = !DILocalVariable(name: "this", arg: 1, scope: !64, type: !54, flags: DIFlagArtificial | DIFlagObjectPointer)
!67 = distinct !DIAssignID()
!68 = !DILocation(line: 0, scope: !64)
!69 = distinct !DIAssignID()
!70 = !DILocation(line: 10, column: 19, scope: !64)
!71 = !DILocation(line: 10, column: 12, scope: !64)
